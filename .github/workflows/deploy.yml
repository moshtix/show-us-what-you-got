name: Test, Build, and Deploy - CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - 'test-five/infrastructure/**'
      - 'test-five/frontend/**'
  pull_request:
    paths:
      - 'test-five/infrastructure/**'
      - 'test-five/frontend/**'

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  unit-test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: test-five/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Frontend Build
        run: |
          npm ci
          npm run build
      - name: Frontend Test
        run: |
          npm run test-cov

  unit-test-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: test-five/infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - run: |
          npm install -g aws-cdk
          npm install -g ts-node
          npm install -g --unsafe-perm=true esbuild

      - name: Infrastructure Test
        run: |
          npm ci
          npm run test

  sonarqube-scan:
    needs: [unit-test-frontend, unit-test-infrastructure]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: test-five

    steps:
      - name: Checking out
        uses: actions/checkout@master
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting.
          fetch-depth: 0
      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.2.0
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}

  build-and-deploy:
    needs: [unit-test-frontend, unit-test-infrastructure]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: test-five

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - run: |
          npm install -g aws-cdk
          npm install -g ts-node

      - name: Frontend Build
        run: |
          cd frontend
          npm ci
          npm run build
          cd ..

      - name: Install CDK and Dependencies
        run: |
          cd infrastructure
          npm install
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          AWS-REGION: ${{ env.AWS_REGION }}

      - name: Deploy to ${STACK_ENVIRONMENT} AWS
        run: |
          cd infrastructure
          cdk deploy TestFiveStack --parameters Environment=production --parameters SnsRecipient=${{ secrets.SNS_RECIPIENT }} --require-approval never --progress=events --no-cli-pager
        env:
          STACK_ENVIRONMENT: production
          CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT_PROD }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

      # DEEM: Deploy stack to pre-production/testing environment.

  # Once deployment is completed, it should run the E2E tests,
  # and make sure your service runs properly on AWS.

  e2e-run:
    runs-on: ubuntu-22.04
    needs: [build-and-deploy]
    defaults:
      run:
        working-directory: test-five/frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run on Chrome
        uses: cypress-io/github-action@v6
        with:
          build: npm install --package-lock-only --ignore-scripts && npm run build
          start: npm start
          browser: chrome
          wait-on: ${{ secrets.FRONTEND_BASE_URL }}
